<!DOCTYPE ht    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="/images/link_kr3_logo.png" type="image/x-icon">
    <link rel="stylesheet" href="/css/test.css">
    <title>KR3 || Test</title>ml>
<html lang="en">
<head>

</head>
<body>
    <%- include("testInstruction.ejs") %>
    <header style="display: none;">
        <div class="logo">
            <span class="logo-text"><img src="/images/logo.png" alt="Company Logo" height="30px" width="70px"></span>
            <!-- <span class="company-name">NOVAGENIUS ENTERPRISES</span> -->
        </div>
        <div class="header-buttons">
            <!-- <button class="btn btn-outline">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" width="16" height="16" style="margin-right: 0.5rem;">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 6.75h12M8.25 12h12m-12 5.25h12M3.75 6.75h.007v.008H3.75V6.75zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zM3.75 12h.007v.008H3.75V12zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm-.375 5.25h.007v.008H3.75v-.008zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
                </svg>
                All questions
            </button> -->
            <button class="btn btn-primary" id="finishButton">Finish</button>
        </div>
    </header>

    <main class="container" style="display: none;">
        <div class="content">
            <div class="question-section">
                <% questions.forEach(function(question, index) { %>
                <div class="card quesCard" id="question-<%= index + 1 %>" style="display: none;">
                    <p style="display: none;" id="questionID"><%=question.question_id%></p>
                    <h2 class="card-title">Question <%= index + 1 %>:</h2>
                    <h3 class="question-title"><%= question.question_text %></h3>
                    <ul class="options">
                        <li class="option">
                            <input class="inpOpt" type="radio" id="optionA<%=question.question_id%>" name="option<%=question.question_id%>" value="A">
                            <label for="optionA<%=question.question_id%>"><%= question.option_a %></label>
                        </li>
                        <li class="option">
                            <input class="inpOpt" type="radio" id="optionB<%=question.question_id%>" name="option<%=question.question_id%>" value="B">
                            <label for="optionB<%=question.question_id%>"><%= question.option_b %></label>
                        </li>
                        <li class="option">
                            <input class="inpOpt" type="radio" id="optionC<%=question.question_id%>" name="option<%=question.question_id%>" value="C">
                            <label for="optionC<%=question.question_id%>"><%= question.option_c %></label>
                        </li>
                        <li class="option">
                            <input class="inpOpt" type="radio" id="optionD<%=question.question_id%>" name="option<%=question.question_id%>" value="D">
                            <label for="optionD<%=question.question_id%>"><%= question.option_d %></label>
                        </li>
                        <li class="option" style="display:none;">
                            <input type="password" id="correct_option<%=question.question_id%>" value="<%= question.correct_option %>"  style="display:none;">
                        </li>
                    </ul>
                </div>
                <% }); %>
                <p id="displayMessage" style="color: red;"></p>
                <div class="navFooter">
                    <button class="nav-button" id="prev-btn" disabled>Previous</button>
                    <button class="nav-button" id="mark-btn" style="background-color: #ff4500;">Mark</button>
                    <button class="nav-button" id="next-btn">Next</button>
                </div>
            </div>

            <div class="sidebar">
                <div class="card">
                    <h3 class="card-title">Time to complete</h3>
                    <p class="timer-value"><span id="timer"><%= duration==null ? "10:00" : duration %></span> / <%= duration==null ? "10:00" : duration %></p>
                </div>

                <div class="card">
                    <h3 class="card-title">Questions</h3>
                    <div class="progress-container">
                        <span class="progress-text"><span id="questionNumber"></span> / <%= questions.length %></span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-bar-fill" id="progressBarFill"></div>
                    </div>
                    <div class="progress-indicators">
                        <div class="status"><div class="indicator indicator-orange"></div><span>Marked</span></div>
                        <div class="status"><div class="indicator indicator-gray"></div><span>Remaining</span></div>
                        <div class="status"><div class="indicator indicator-green"></div><span>Answered</span></div>
                    </div>
                    <div class="question-grid">
                        <% for (let i = 1; i <= questions.length; i++) { %>
                            <button onclick="showQuestion('<%= i %>')" class="question-button"><%= i %></button>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </main>
    <section id="previewBox" style="display: none;">
        <div class="previewContainer">
            <h3>All Questions Preview</h3>
            <div class="previewQuestions">
                <% for (let i = 1; i <= questions.length; i++) { %>
                    <button onclick="showQuestion('<%= i %>')" class="question-button"><%= i %></button>
                <% } %>
            </div>
            <button id="finalSubmit">Submit</button>
        </div>
        <p id="submitMessage" style="color: #05aa4f; margin-top: 40px;"></p>
    </section>
    <section id="displayResultBox" style="display: none;">
        <div class="resultContainer">
            <h2>Result</h2>
            <div class="showResult">
                <h3 id="resultStatus"></h3>
                <p id="score"></p>
            </div>
            <button id="backHomeBtn">Back to home</button>
        </div>
    </section>
    <script>
        window.addEventListener('load', () => {
            // Clear session when user reload the page
            sessionStorage.clear()

            // Display the first question on page load
            displayQuestion();
        });

         // This event triggers when the user tries to leave or reload the page
         window.addEventListener("beforeunload", function (event) {
            // Prevent the default behavior (leaving/reloading the page)
            event.preventDefault();
            
            // Chrome requires setting the returnValue property for this to work
            event.returnValue = "Are you sure you want to leave this page?";
        });

        // Test info handle
        document.getElementById('testInfoBtn').addEventListener('click', () => {
            document.getElementById('testInfoBox').style.display = "none";
            document.getElementById('testInstructionBox').style.display = "flex";
        })

        // Test instruction handle
        document.getElementById('testInstructionBtn').addEventListener('click', () => {
            let surity = confirm("Are you ready to start test?");
            if(surity) {
                document.getElementById('testInstructionBox').style.display = "none";
                document.querySelector('.container').style.display = "block";
                document.querySelector('header').style.display = "flex";
                startTimer();
            }
        })

        let currentQuestionIndex = 0;
        
        // Function to display the current question
        const questions = document.querySelectorAll(".quesCard");
        function displayQuestion() {
            questions.forEach(q => q.style.display = "none");

            const currentQuestionElement = document.getElementById("question-" + (currentQuestionIndex + 1));
            currentQuestionElement.style.display = "block";

            // Display question Number
            document.getElementById('questionNumber').innerHTML = currentQuestionIndex + 1;

            // Progress bar fill width
            document.getElementById('progressBarFill').style.width = (((currentQuestionIndex) / (questions.length))*100) +"%";

            // Disable previous button on the first question
            document.getElementById("prev-btn").disabled = currentQuestionIndex === 0;

            // Attach event listeners to the current question's options
            addOptionSessionStorage(currentQuestionIndex + 1);
        }

        // Show previously selected option if it exists in sessionStorage
        const questionID = document.querySelector(`#question-${currentQuestionIndex + 1} #questionID`).textContent;
        const selectedOption = sessionStorage.getItem(questionID);

        if (selectedOption) {
            // Find the option and select it
            const options = document.querySelectorAll(`#question-${currentQuestionIndex + 1} .inpOpt`);
            options.forEach(option => {
                if (option.value[0] === selectedOption) {
                    option.checked = true;
                }
            });
        }

        // Function to handle previous button click
        function prevQuestion() {
            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                displayQuestion();
            }
        }

        // Function to handle mark button click
        function markQuestion() {
            const questions = document.querySelectorAll(".quesCard");
            // Check if it's the last question
            const isLastQuestion = currentQuestionIndex+1 === questions.length;

            if (currentQuestionIndex < questions.length - 1) {
                updateQuestionGridButton(currentQuestionIndex + 1, 'marked'); // Mark as marked
                currentQuestionIndex++;
                displayQuestion();
                document.getElementById('displayMessage').style.display = "none"; // Hide the message
            } else if(isLastQuestion) {
                updateQuestionGridButton(currentQuestionIndex + 1, 'marked'); // Mark as marked
                finalPreview()
            }
        }

        // Function to handle next button click
        function nextQuestion() {
            // Get the current question ID
            const questionID = document.querySelector(`#question-${currentQuestionIndex + 1} #questionID`).textContent;

            // Get the display message element
            const displayMessageElement = document.getElementById('displayMessage');

            // Check if the question ID exists in sessionStorage (meaning it has been answered)
            let isQuestionAnswered = Object.keys(sessionStorage).includes(questionID);
            // Check if it's the last question
            const isLastQuestion = currentQuestionIndex+1 === questions.length;

            if (isLastQuestion && isQuestionAnswered) {
                // If on the last question and it's answered, show final preview
                updateQuestionGridButton(currentQuestionIndex + 1, 'answered'); // Mark as answered
                finalPreview()

            } else if (isQuestionAnswered && currentQuestionIndex < questions.length - 1) {
                // If answered, hide the message and move to the next question
                displayMessageElement.style.display = "none"; // Hide the message
                updateQuestionGridButton(currentQuestionIndex + 1, 'answered'); // Mark as answered
                currentQuestionIndex++;
                displayQuestion();
            } else {
                // If not answered, display the message asking the user to choose an option
                displayMessageElement.style.display = "block"; // Show the message again
                displayMessageElement.innerHTML = "** Please choose an option OR click on the mark button to do it later!";
            }
        };

        // Add event listeners to buttons
        document.getElementById("prev-btn").addEventListener("click", prevQuestion);
        document.getElementById("mark-btn").addEventListener("click", markQuestion);
        document.getElementById("next-btn").addEventListener("click", nextQuestion);

        // Function to update question button in grid
        function updateQuestionGridButton(questionNumber, status) {
            const questionButton = document.querySelector(`.question-button:nth-child(${questionNumber})`);
            const previewButton = document.querySelector(`.previewQuestions .question-button:nth-child(${questionNumber})`);

            if (status === 'answered') {
                // Apply green class for answered
                questionButton.classList.remove('marked');
                previewButton.classList.remove('marked');
                questionButton.classList.add('answered');
                previewButton.classList.add('answered');
            } else if (status === 'marked') {
                // Apply orange class for marked
                questionButton.classList.remove('answered');
                previewButton.classList.remove('answered');
                questionButton.classList.add('marked');
                previewButton.classList.add('marked');
                
            }
        }

        // Timer function
        function setTimer(duration, display) {
            var timer = duration, minutes, seconds;
            const myInterval = setInterval(function () {
                minutes = parseInt(timer / 60, 10);
                seconds = parseInt(timer % 60, 10);
                minutes = minutes < 10 ? "0" + minutes : minutes;
                seconds = seconds < 10 ? "0" + seconds : seconds;
                display.textContent = minutes + ":" + seconds;
                if(timer == 0) {
                    // auto save user response after timeout
                    document.getElementById('finishButton').click();
                    clearInterval(myInterval);
                } else if (--timer < 0) {
                    timer = 0;
                }
            }, 1000);
        }

        function startTimer() {
            // Initialize the timer for 30 minutes
            var thirtyMinutes = 60 * parseInt(document.getElementById('timer').innerHTML),
                display = document.querySelector('#timer');
            setTimer(thirtyMinutes, display);
        };

        function showQuestion(questionNumber) {
            
            document.querySelector('#previewBox').style.display = "none";
            document.querySelector('.container').style.display = "block";
            // Set current question index to the clicked question number
            currentQuestionIndex = questionNumber - 1;
            displayQuestion();
        }

        // Function to add user response in Session Storage
        function addOptionSessionStorage(questionIndex) {
            // Finding selected user response
            const options = document.querySelectorAll(`#question-${questionIndex} .inpOpt`);
            // Finding question id which is currently displayed on the screen
            const questionID = document.querySelector(`#question-${questionIndex} #questionID`).textContent;
            const correct_option = document.querySelector(`#question-${questionIndex} #correct_option${questionID}`);
            options.forEach(option => {
                option.addEventListener('change', () => {
                    //console.log(correct_option.value)
                    // Storing user response in session storage
                    sessionStorage.setItem(questionID, [option.value,correct_option.value]);
                });
            });
        }

        // Final preview function
        function finalPreview() {
            document.querySelector('.container').style.display = "none";
            document.querySelector('#previewBox').style.display = "flex";
        }

        // Function to submit user response to session storage
        function setResponse() {
            let allQuestionId = Object.keys(sessionStorage); // have all questions id
            let allUserResponse = [];
            allQuestionId.map((currQuesId) => {
                allUserResponse.push([sessionStorage.getItem(currQuesId)])
            })
            for(i=0; i < allUserResponse.length; i++) {
                result(allUserResponse[i][0].split(','))
            }
        }

        // Final submission 
        let isClicked;
        document.getElementById('finalSubmit').addEventListener('click', () => {
            let surity = confirm("Are you sure for final submission!");
            if(surity) {
                setResponse();
                isClicked = "clicked";
                document.getElementById('submitMessage').innerHTML = "Your response submitted successfully. Now click on Finish button."
                document.querySelector(".previewContainer").style.display = "none";
            }
        })

        let count = 0;
        function result(Response){
            if(Response[0] === Response[1]) {
                count += 1;
            }
        }
        
        // Finish button
        document.getElementById('finishButton').addEventListener('click', () => {
            // checking submit btn clicked or not by user during submission
            if(isClicked != "clicked"){
                setResponse();
            }
            document.querySelector('.container').style.display = "none";
            document.querySelector('#previewBox').style.display = "none";
            document.querySelector('header').style.display = "none";
            document.querySelector('#displayResultBox').style.display = "flex";

            // Finding percentage of passing mark
            let passPercentage = Math.round((count/questions.length) * 100);
            //console.log(passPercentage)

            // Checking pass and fail
            if(passPercentage >= 60) {
                document.getElementById('resultStatus').innerHTML = "Your result is : Pass";
                document.getElementById('resultStatus').style.color = "#05aa4f";
                document.getElementById('score').innerHTML = "You have score "+count+" out of "+questions.length+".";
                document.getElementById('score').style.color = "#05aa4f";
            } else {
                document.getElementById('resultStatus').innerHTML = "Your result is : Fail";
                document.getElementById('resultStatus').style.color = "red";
                document.getElementById('score').innerHTML = "You have score "+count+" out of "+questions.length+".";
                document.getElementById('score').style.color = "red";
            }
            sessionStorage.clear();
        })

        // Send back to home page
        document.getElementById('backHomeBtn').addEventListener('click', () => {
            window.location.replace('/');
        });
    </script>
</body>
</html>

